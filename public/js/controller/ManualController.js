// controllers/ManualController.js â€“ manuÃ¡lis mÃ³d, NINCS alapÃ©rtelmezett fegyver
export default class ManualController {
  constructor({ view, resultView, models, services }) {
    this.view = view;
    this.resultView = resultView;
    this.Attacker = models.Attacker;
    this.Defender = models.Defender;
    this.services = services; // { weaponsMapper, calcTotals }
    this._inited = false;     // ne fusson kÃ©tszer
  }
  init() {
    if (this._inited) return;
    this._inited = true;

    const { weaponsMapper } = this.services;
    const container = this.view.getContainer();
    const template = this.view.getTemplate();

    // DEFAULT: NEM teszÃ¼nk be fegyvert. A kontÃ©ner indulÃ¡skor Ã¼res marad.

    // Ãšj sor hozzÃ¡adÃ¡sa felhasznÃ¡lÃ³i kÃ©rÃ©sre
    this.view.onAddWeapon(() => weaponsMapper.addWeaponFromTemplate(template, container));

    // FÃ¡zisvÃ¡ltÃ¡skor tÃ¶rÃ¶ljÃ¼k az eredmÃ©nyt (ne maradjon fÃ©lrevezetÅ‘)
    this.view.onPhaseChange(() => {
      this.resultView.showHint('ðŸ’¡ ManuÃ¡lis mÃ³d: adj hozzÃ¡ legalÃ¡bb egy fegyvert, majd kattints a SzÃ¡mÃ­tÃ¡s gombra.');
    });

    // ManuÃ¡lis szÃ¡mÃ­tÃ¡s
    this.view.onCalculate(() => {
      const phase = this.view.phase;
      const mounts = weaponsMapper.readMounts(container);
      const attacker = new this.Attacker({
        name: 'Manual',
        rangedMounts: phase === 'ranged' ? mounts : [],
        meleeMounts:  phase === 'melee'  ? mounts : []
      });
      const weapons = attacker.getWeapons(phase);
      const defVals = this.view.getDefenderValues();
      const res = this.services.calcTotals(weapons, new this.Defender(defVals));
      this.resultView.renderManual(res);
    });
  }
}
